<h1>About</h1>
<h4>2022 Fall</h4>
<p>Introduction to Computer Programming (計算機程式)</p>
<p><a href="https://www.youtube.com/c/Freecodecamp/search?query=python">https://www.youtube.com/c/Freecodecamp/search?query=python</a> </p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China#Construction_details">ROC 國旗規格</a> <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#%E8%A7%84%E6%A0%BC">PROC 國旗規格</a> <a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">USA 國旗規格</a></p>
<p><a href="https://gist.github.com/mdecourse/05930b1775b77293523b59b1bbb43e57">Gist Brython scripts</a></p>
<p><a href="https://www.arc.id.au/CanvasGraphics.html">Cango</a></p>
<p><a href="/downloads/turtle.py.txt">turtle.py</a></p>
<p><a href="/downloads/turtle_graphics.pdf">turtle_graphics.pdf</a> (<a href="https://www.cs.auckland.ac.nz/compsci111ssc/lectures/LectureSlides/L25_Python3.pdf">source</a>)</p>
<p><a href="/downloads/turtle_graphics_2.pdf">turtle_graphics_2.pdf</a> (<a href="https://eecs.wsu.edu/~schneidj/PyBook/chap13.pdf">source</a>)</p>
<p><a href="/downloads/turtle_graphics_3.pdf">turtle_graphics_3.pdf</a> (<a href="https://www.cs.utexas.edu/~byoung/summer-python-class/summer15-turtle-graphics.pdf">source</a>)</p>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="auto_tetris">Auto Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
################################## auto tetris start
auto_tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/45740f32e5c3ee292a88df8a47f46e60039b77f9/pygame_to_brython_tetris_ai.py"
auto_tetris = button2(auto_tetris_url)
doc["auto_tetris"].bind("click", auto_tetris.do)
################################## auto tetris end
</script>
</p>
<h1>CPython</h1>
<p>比對兩份資料, 列出差異:</p>
<p style="padding-left: 30px;">數列應用</p>
<p style="padding-left: 30px;">for 重複迴圈</p>
<p style="padding-left: 30px;">以 utf-8 編碼讀出檔案內容</p>
<p style="padding-left: 30px;">splitlines() 函式逐行將檔案內容放入數列</p>
<p style="padding-left: 30px;">if 判斷式應用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 兩份資料所在目錄字串
studlist_path = "Y:/studlist/2022spring/"
score_path = "Y:/score/2022/spring/"
# score 區檔案套稿字串
score_file_temp = "_stud_list.txt"
# 班級代號數列
classes = ["1a", "2a", "2b", "5j"]

# 利用 for 迴圈, 逐班進行處理
for i in classes:
    # read data from studlist
    # 以 utf-8 編碼開啟檔案
    with open(studlist_path + i + ".txt", encoding="utf-8") as f:
        studlist_data = f.read().splitlines()
    #print(studlist_data)
    with open(score_path + i + "/" + i + score_file_temp, encoding="utf-8") as f:
        score_list_data = f.read().splitlines()
    #print(score_list_data)
    for i in studlist_data:
        stud_num = i.split("\t")[0]
        #print(stud_num)
        # 列出已經不在評分名單中的學號
        if stud_num not in score_list_data:
            print(stud_num)</pre>
<p>MS Teams assignment downloaded directory rename:</p>
<p style="padding-left: 30px;">os 模組的 walk() 應用</p>
<p style="padding-left: 30px;">next() 應用</p>
<p style="padding-left: 30px;">讀取檔案內容</p>
<p style="padding-left: 30px;">splitlines() 將各行資料納入數列</p>
<p style="padding-left: 30px;">dictionary 資料結構應用</p>
<p style="padding-left: 30px;">for 重複迴圈應用</p>
<p style="padding-left: 30px;">try 與 except 應用</p>
<p style="padding-left: 30px;">os 模組的 rename() 應用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os

'''
MS Teams student submitted assignment files can be downloaded through SharePoint App, but directory named as student name,
we may use this program to rename directory into student number
'''
# from https://stackoverflow.com/questions/141291/how-to-list-only-top-level-directories-in-python
# rename directory: os.rename(source,destination)
stud_name_list = next(os.walk('./cd2022_student'))[1]
#print(stud_name_list)
# read data from wcm2022_5j_stud_name_email.txt
# firstname \t lastname \t email
with open("cd2022_stud_name_email.txt", encoding="utf-8") as f:
    data = f.read().splitlines()
# set stud_name and stud_num into dict
stud_dict = {}
# skip the first line
for i in data[1:]:
    line = i.split("\t")
    firstname = line[0]
    lastname = line[1]
    # get student number from email
    stud_num = line[2].split("@")[0]
    stud_dict[lastname+firstname] = stud_num
print(stud_dict)
dir_pre = './cd2022_student/'
# loop stud_name_list and rename into stud_num
for i in stud_name_list:
    try:
        os.rename(dir_pre+i, dir_pre+stud_dict[i])
        print("rename ", i, " into ", stud_dict[i])
    except:
        print(i, "no data")
</pre>
<p></p><h2>CAD</h2>
<p>SolidWorks: <a href="https://www.solidworks.com/">https://www.solidworks.com/</a> </p>
<p>AutoDesk Inventor: <a href="https://www.autodesk.com/products/inventor">https://www.autodesk.com/products/inventor</a> </p>
<p>Siemens NX: <a href="https://www.plm.automation.siemens.com/global/en/products/nx/">https://www.plm.automation.siemens.com/global/en/products/nx/</a> </p>
<p>PTC Onshape: <a href="https://www.ptc.com/en/products/onshape">https://www.ptc.com/en/products/onshape</a> </p>
<p>Solvespace: <a href="https://solvespace.com">https://solvespace.com</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a> </p><h3>Python for SW</h3>
<p><a href="http://wcm.cycu.org:88/github/cad2020/content/HW1_SW.html">http://wcm.cycu.org:88/github/cad2020/content/HW1_SW.html</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pythoncom
import win32com.client
import win32api
import os
 
os.system("taskkill /IM sldworks.exe /F")
os.system("taskkill /IM sldworks_fs.exe /F")
 
'''
About DispatchEx and Dispatch Methods:
https://stackoverflow.com/questions/18648933/using-pywin32-what-is-the-difference-between-dispatch-and-dispatchex
Source code:
http://pywin32.hg.sourceforge.net/hgweb/pywin32/pywin32/file/0db1b26904d5/com/win32com/src/PyIDispatch.cpp
Doc:
https://docs.microsoft.com/en-us/dotnet/standard/native-interop/com-callable-wrapper
 
IDispatch: Provides a mechanism for late binding to type.
IDispatchEx:
    Interface supplied by the runtime if the class implements IExpando. The IDispatchEx interface is an extension of the IDispatch interface that, unlike IDispatch, enables enumeration, addition, deletion, and case-sensitive calling of members.
'''
app = win32com.client.DispatchEx("SldWorks.Application")
#app=win32com.client.Dispatch("SldWorks.Application")
 
# define var to convert variables
def var(type, value):
    # type needs to be string
    # use builtin getattr() to return pythoncom.type
    pytype = getattr(pythoncom, type)
    return win32com.client.VARIANT(pytype, value)
 
# for two-type variable convert
# is there any three-type variant?
def var2(type1, type2, value):
    pytype1 = getattr(pythoncom, type1)
    pytype2 = getattr(pythoncom, type2)
    return win32com.client.VARIANT(pytype1|pytype2, value)
     
def part(app, fileName, sketchName, dimName, newDim, newFileName):
    arg1 = var("VT_I4", 1)
    # GetMassProperties( ((3, 1), (16387, 3)))
    #arg1 = win32com.client.VARIANT(pythoncom.VT_I4, 1)
    arg2 = var("VT_I4", -1)
 
    # 0. need the most important obj app
    #app=win32com.client.Dispatch("SldWorks.Application")
    # use relative directory to open part
    # 1. open part file, need the path of the part file (need the file name)
    #doc=app.OpenDoc(".\\block2.SLDPRT", 1)
    doc=app.OpenDoc(os.path.join(os.getcwd(), fileName), 1)
    # save part as binary stl
    # can we save part as ASCII stl as well?
    #doc.SaveAs2(".\\block2.stl", 0, True, False)
    # the parameter VARIANT list for SelectByID2
    # can we automate the VARIANT conversion?
    # 2. use the sketch to select the SKETCH (need the sketch name)
    #SelectByID2((8, 1), (8, 1), (5, 1), (5, 1), (5, 1), (11, 1), (3, 1), (9, 1), (3, 1))
    #arg3 = var("VT_BSTR", "Sketch1")
    arg3 = var("VT_BSTR", sketchName)
    arg4 = var("VT_BSTR", "SKETCH")
    arg5 = var("VT_R8", 0)
    arg6 = var("VT_R8", 0)
    arg7 = var("VT_R8", 0)
    arg8 = var("VT_BOOL", False)
    arg9 = var("VT_I4", 0)
    arg10 = var("VT_DISPATCH", None)
    arg11 = var("VT_I4", 0)
    # select Sketch1 first
    status = doc.Extension.SelectByID2(arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    # select DIMENSION to to modify
    # 3. use the dimension name @ sketch name @ part file name
    # to select the DIMENSION to modify
    #arg12 = var("VT_BSTR", "Width@Sketch1@block2.SLDPRT")
    arg12 = var("VT_BSTR", dimName+"@"+sketchName+"@"+fileName)
    arg13 = var("VT_BSTR", "DIMENSION")
    status = doc.Extension.SelectByID2(arg12, arg13, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    #Dim swDimension As SldWorks.Dimension
    # 4. to bring out the parameter to modify, need the dimension name and 
    # sketch name
    #swDimension = doc.Parameter("Width@Sketch1")
    swDimension = doc.Parameter(dimName+"@"+sketchName)
    # the dimension unit is in meter
    # 5. need the new value of the parameter
    #swDimension.SystemValue = 0.50
    swDimension.SystemValue = newDim
    # 6. do the final house keeping process, clear selection and rebuild the part
    sel = doc.ClearSelection2 
    sel = True
    status = doc.EditRebuild()
    arg31 = var("VT_I4", 1)
    arg32 = var2("VT_I4", "VT_BYREF", 3)
    # 7. get the volume of the new part
    volumn = doc.Extension.GetMassProperties(arg31, arg32)
    #print(volumn[3]*1E9, "mm*3")
    # 8. save the new part (need the new part file name)
    #doc.SaveAs2(".\\block3.SLDPRT", 0, True, False)
    doc.SaveAs2(os.path.join(os.getcwd(), "html/" + newFileName + ".SLDPRT"), 0, True, False)
    # save jpg of part
    doc.EditRebuild()
    arg33 = var("VT_BSTR", "Isometric")
    doc.ShowNamedView(arg33)
    doc.ViewZoomtofit2()
    doc.SaveAs3(os.path.join(os.getcwd(), "html/" + newFileName + ".jpg"), 0, 0)
    # mm*3
    return str(round(volumn[3]*1E9, 3)) + " mm*3"
html = "以下零件採 SolidWorks 2017 SP 2.0 教育版繪製:&lt;br /&gt;&lt;br /&gt;&lt;table border='1' cellpadding='5'&gt;&lt;tr&gt;&lt;th&gt;Number&lt;/th&gt;&lt;th&gt;Part&lt;/th&gt;&lt;th&gt;Jpg&lt;/th&gt;&lt;th&gt;Width&lt;/th&gt;&lt;th&gt;Volume&lt;/th&gt;&lt;/tr&gt;"
index = 0
for i in range(1, 11):
    dim = i*0.002
    blockVolume = part(app, "31_step.SLDPRT", "Sketch1", "Width", dim, "31_" + str(i))
    print("31_" + str(i) + ".SLDPRT, dim= " + str(round(dim, 3)) +", volume= " + blockVolume)
    index += 1
    newFileName = "31_" + str(i)
    html += '''&lt;tr&gt;
    &lt;td&gt;''' + str(index) +'''&lt;/td&gt;
    &lt;td&gt;&lt;a href="./../downloads/sw_macro/html/''' + newFileName + '''.SLDPRT"&gt;''' + newFileName + '''.SLDPRT&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;img width="300" src="./../downloads/sw_macro/html/''' + newFileName + '''.jpg"&gt;&lt;/img&gt;&lt;/td&gt;
    &lt;td&gt;''' + str(round(dim*1000, 2)) + ''' mm &lt;/td&gt;
    &lt;td&gt;''' + blockVolume + '''&lt;/td&gt;
    &lt;/tr&gt;
    '''
html += "&lt;/table&gt;"
# save part.html
with open("./html/part.html", "w", encoding="utf-8") as f:
     f.write(html)
      
'''
for assembly
        swModelDocExt.SelectByID2("", "EDGE", -0.439825991092107, 7.07350481263802E-02, 0.40982045578545, true, 2, null, 0);
        swModelDocExt.SelectByID2("", "EDGE", -0.219003008311574, 0.073085842475507, 0.549481823985616, true, 4, null, 0);
        swModelDocExt.SelectByID2("Part-3@AssemModel", "COMPONENT", 0, 0, 0, true, 1, null, 0);
        swFeature = (Feature)swFeatureManager.FeatureLinearPattern2(3, 40 / 1000, 0, 0, false, true, "NULL", "NULL", false);
        assemblyModel.ClearSelection2(true);
'''
os.system("taskkill /IM sldworks.exe /F")
os.system("taskkill /IM sldworks_fs.exe /F")
# now the SolidWorks is embedding</pre>
<p></p><h3>Python for INV</h3>
<p>針對 HW1 使用 AutoDesk Inventor 2019 教育版繪零件圖者, 可以利用下列 Python 程式修改零件參數, 取零件影像圖並計算零件體積:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pythoncom
import win32com.client
import win32api
import os
 
# Open Inventor
invApp = win32com.client.Dispatch("Inventor.Application")
#print(invApp)
invApp.Visible = True
 
invApp.SilentOperation = True
 
# Set location of assembly
partName = 'C:/tmp/Part1.ipt'
 
# Open the model
oDoc = invApp.Documents.Open(partName)
# use UserParameters to access the user parameters
#oUserParams = oDoc.ComponentDefinition.Parameters.UserParameters
#oNewParam = oUserParams.AddByExpression("x", "9", "mm")
# use Item() to get the model parameter named "d0"
d0 = oDoc.ComponentDefinition.Parameters.Item("d0")
# Expression can add dimension unit
#d0.Expression = "2 cm"
# Value use the default system unit: cm
d0.Value = 2
# use Update() method to get the new part volume
oDoc.Update()
# fit the active view and save the part image
invApp.ActiveView.Fit(True)
oDoc.SaveAs("C:/tmp/Part1.png", True)
print(oDoc.ComponentDefinition.MassProperties.Volume)
#invApp.Quit()</pre>
<p></p><h3>Python for NX</h3>
<p>針對 HW1 使用 NX12.0.2 教育版繪零件圖者, 可以利用下列 Python 程式修改零件參數, 取零件影像圖並計算零件體積:</p>
<p>參考零件: <a href="http://wcm.cycu.org:88/github/cad2020/downloads/nx12/journal/block.prt">block.prt</a></p>
<p><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html">NX12 NXOpen Python API Reference</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># nx_open_part.py
# 導入 NXOpen
import NXOpen
import NXOpen.UF
import NXOpen.Gateway
   
def main():
    # 取得目前開啟的工作階段
    theSession = NXOpen.Session.GetSession()
    theUfSession = NXOpen.UF.UFSession.GetUFSession()
      
    # 建立 ListingWindow
    listWin= theSession.ListingWindow
    # 開啟零件檔案
    basePart1 = theSession.Parts.OpenBaseDisplay("c:/tmp/block.prt")
    workPart = theSession.Parts.Work
    unit1 = workPart.UnitCollection.FindObject("MilliMeter")
    # height
    p7 = workPart.Expressions.FindObject("p7")
    # width
    p8 = workPart.Expressions.FindObject("p8")
    # length
    p9 = workPart.Expressions.FindObject("p9")
    workPart.Expressions.EditWithUnits(p7, unit1, "30")
    workPart.Expressions.EditWithUnits(p8, unit1, "60")
    workPart.Expressions.EditWithUnits(p9, unit1, "90")
    theSession.UpdateManager.DoUpdate(0)
    #saveStatus1 = workPart.SaveAs("c:/tmp/block_new.prt")
    #saveStatus1.Dispose()
    # initialize list to hold bodies
    theBodyTags = []
   
    for x in workPart.Bodies:
        if x.IsSolidBody:
            theBodyTags.append(x.Tag)
      
    # 準備輸出 ASCII 格式 STL 零件檔案
    sTLCreator1 = theSession.DexManager.CreateStlCreator()
    sTLCreator1.AutoNormalGen = True
    sTLCreator1.ChordalTol = 0.08
    sTLCreator1.AdjacencyTol = 0.08
    sTLCreator1.OutputFile = "C:\\tmp\\block_ascii.stl"
    # Binary STL: NXOpen.STLCreatorOutputTypeEnum.Binary
    sTLCreator1.OutputType = NXOpen.STLCreatorOutputTypeEnum.Text
    # 已知 body1 命名
    body1 = workPart.Bodies.FindObject("EXTRUDE(2)")
    added1 = sTLCreator1.ExportSelectionBlock.Add(body1)
    nXObject1 = sTLCreator1.Commit()
    sTLCreator1.Destroy()
  
    # 開啟所建立的 ListingWindow
    listWin.Open()
    listWin.WriteLine("number of solid bodies: " + str(len(theBodyTags)))
   
    (massProps, Stats) = theUfSession.Modeling.AskMassProps3d(theBodyTags, len(theBodyTags), 1, 4, .03, 1, [0.99,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])
    listWin.WriteLine("units: kg, mm")
    listWin.WriteLine("surface area: " + str(massProps[0]))
    listWin.WriteLine("volume: " + str(massProps[1]*1E9))
    # 在 ListingWindow 中寫入字串
    listWin.WriteLine("Hello, NXOpen")
    listWin.Close()
     
    # 將零件檔案 fit 之後, export 出 png 檔案
    theUI = NXOpen.UI.GetUI()
    imageExportBuilder1 = theUI.CreateImageExportBuilder()
 
    custombackgroundcolor1 = [None] * 3
    custombackgroundcolor1[0] = 1.0
    custombackgroundcolor1[1] = 1.0
    custombackgroundcolor1[2] = 1.0
 
    imageExportBuilder1.SetCustomBackgroundColor(custombackgroundcolor1)
    imageExportBuilder1.FileFormat = NXOpen.Gateway.ImageExportBuilder.FileFormats.Png
    imageExportBuilder1.FileName = "c:\\tmp\\block.png"
 
    imageExportBuilder1.BackgroundOption = NXOpen.Gateway.ImageExportBuilder.BackgroundOptions.Original
 
    imageExportBuilder1.EnhanceEdges = False
    imageExportBuilder1.RegionMode = False
    # fit view 後 commit export png
    workPart.ModelingViews.WorkView.Fit()
    nXObject6 = imageExportBuilder1.Commit()
 
    imageExportBuilder1.Destroy()
      
if __name__ == "__main__":
    main()</pre>
<p></p><h2>CAE</h2>
<h4>Mechatronic control system design and simulation:</h4>
<h4 style="padding-left: 30px;">Coppeliasim:</h4>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<p style="padding-left: 90px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm">https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm</a></p>
<p style="padding-left: 90px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm">https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a> </p>
<h4 style="padding-left: 30px;">Webots:</h4>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/">https://cyberbotics.com/</a> </p>
<p style="padding-left: 60px;"><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a> </p>
<h4>FEM:</h4>
<h4 style="padding-left: 30px;">sfepy:</h4>
<p style="padding-left: 60px;"><a href="https://sfepy.org/doc-devel">https://sfepy.org/doc-devel</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/sfepy/sfepy">https://github.com/sfepy/sfepy</a></p>
<p style="padding-left: 60px;"><a href="https://sfepy.org/doc-devel/examples/gallery.html">https://sfepy.org/doc-devel/examples/gallery.html</a></p>
<h4 style="padding-left: 30px;">Netgen/NGSolve:</h4>
<p style="padding-left: 60px;"><a href="https://www.math.uzh.ch/compmath/fileadmin/user/stas/compmath/Abschlussarbeiten/Arnold_Noam/myManual.pdf">https://www.math.uzh.ch/compmath/fileadmin/user/stas/compmath/Abschlussarbeiten/Arnold_Noam/myManual.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://ngsolve.org/">https://ngsolve.org/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/NGSolve/ngsolve">https://github.com/NGSolve/ngsolve</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/NGSolve/netgen">https://github.com/NGSolve/netgen</a></p>
<p style="padding-left: 60px;"></p><h2>MS Graph</h2>
<p>Microsoft Graph client library for Python</p>
<p><a href="https://github.com/microsoftgraph/msgraph-sdk-python-core">https://github.com/microsoftgraph/msgraph-sdk-python-core</a></p>
<h4>MS Teams:</h4>
<p style="padding-left: 30px;">Microsoft Teams is the ultimate hub for teamwork and intelligent communications. Built on the strength and scale of Microsoft 365 with over 120 million users, Microsoft Teams delivers chat-based collaboration, meetings, calling, and enterprise voice features.</p>
<h4>MS Graph:</h4>
<p style="padding-left: 30px;">Microsoft Graph makes it easy to create large numbers of teams and populate them with users and channels, by automating the creation and management of teams, channels, tabs, and apps. Microsoft Graph also lets you find and archive the teams you are no longer using. This is the same API that the Microsoft Teams Admin Center and Teams PowerShell cmdlets are built on.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/KCvAhQEJmyY" title="YouTube video player" width="560"></iframe></p>
<h4>More MS Teams related video:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/c/Microsoft365Developer/search?query=Teams">https://www.youtube.com/c/Microsoft365Developer/search?query=Teams</a></p>
<h4>安裝模組:</h4>
<p style="padding-left: 30px;">pip install msgraph-core azure-identity</p>
<p>Target:</p>
<h4>MS Graph SDK for MS Teams:</h4>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/graph/teams-concept-overview">https://docs.microsoft.com/en-us/graph/teams-concept-overview</a></p>
<h4>Login: </h4>
<p style="padding-left: 30px;"><a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">https://developer.microsoft.com/en-us/microsoft-365/dev-program</a></p>
<h3>MS Teams</h3>
<p><a href="https://docs.microsoft.com/en-us/sharepoint/dev/solution-guidance/security-apponly-azuread">Granting access via Azure AD App-Only | Microsoft Docs</a></p>
<p style="padding-left: 30px;">Azure Access Control (ACS), a service of Azure Active Directory (Azure AD), has been retired on November 7, 2018. This retirement does not impact the SharePoint Add-in model, which uses the <a href="https://accounts.accesscontrol.windows.net">https://accounts.accesscontrol.windows.net</a> hostname (which is not impacted by this retirement). For more information, see <a href="https://developer.microsoft.com/office/blogs/impact-of-azure-access-control-deprecation-for-sharepoint-add-ins">Impact of Azure Access Control retirement for SharePoint Add-ins</a>.</p>
<p>Download MS Teams Student submitted files:</p>
<ol>
<li>Login to Onedrive.</li>
<li>From App Launcher, select SharePoint -&gt; My sites.</li>
<li>Search for the specific class -&gt; Site contents -&gt; Student Work -&gt; Submitted Files, click Download to download all submitted files or use Ctrl to select multiple students and click Download to download associated files.</li>
</ol>
<h1>cmsimde</h1>
<p><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> </p>
<h4>cmsimde Template:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmstemplate">https://github.com/mdecycu/cmstemplate</a> </p><h1>VSCode</h1>
<h4>EBooks:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6901-5">Visual Studio Code Distilled </a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7344-9">Optimizing Visual Studio Code for Python Development </a></p>
<h4>Portable mode of Visual Studio Code:</h4>
<p style="padding-left: 30px;"><a href="https://code.visualstudio.com/docs/editor/portable">https://code.visualstudio.com/docs/editor/portable</a> (338 MB) </p>
<h4>Leo for VSCode:</h4>
<p style="padding-left: 30px;"><a href="https://marketplace.visualstudio.com/items?itemName=boltex.leointeg">https://marketplace.visualstudio.com/items?itemName=boltex.leointeg</a> </p>
<p></p>